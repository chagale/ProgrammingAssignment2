setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$get()
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
i
i<-x$getinverse()
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
i
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() {
i<<-solve(x)
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() {
i<<-solve(x)
}
getinverse<-function() {
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) i<<-solve(x)
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) i<<-solve(x)
getinverse<<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<<-function(solve) i<<-solve(x)
getinverse<<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$setinverse(solve(amatrix))
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) i<<-solve(x)
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function() i<<-solve(x)
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
?solve
?mean
?solve
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) {
i<<-solve
}
getinverse<-function() {
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) {
i<<-solve(x)
}
getinverse<-function() {
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(solve) {
i<<-solve(x)
}
getinverse<-function() {
i<<-solve(x)
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix()
set<-function(y) {
x<<-y
i<<-matrix()
}
get<-function() x
setinverse<-function(x) {
i<<-solve(x)
}
getinverse<-function() {
i<<-solve(x)
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.na(i)) {
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
help matrix
?matrix
makeCacheMatrix<- function(x = matrix()) {
i<-matrix(nrow=2,ncol=2)                                  ## create i as a null matrix
set<-function(y) {                          ## our first function, set, takes the matrix argument and sets it as our value
x<<-y
i<<-matrix()
}                                           ## get returns the value of the matrix
get<-function() x
setinverse<-function(solve) {               ## setinverse calculates the inverse of our matrix x, and passes i to the parent environment where it replaces the null matrix i
i<<-solve(x)
}
getinverse<-function() {                    ## getinverse retrieves the value of the inverted matrix, i, which is searched for in the current environment, not found, but found in the parent environment
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) ## makeCacheMatrix function returns a list which each of the above functions as its objects
}
## cacheSolve sees if there is a cached value of i (our inverted matrix) and returns it if there is, and if not, calculates an inverted matrix from objects stored in the previous function
cacheSolve <- function(x, ...) {
i<-x$getinverse()        ## first check x to see if there is a value stored in the getinverse function/object
if(!is.na(i)) {         ## if it is not na, then return the message that it is retrieving cached data that is stored in getinverse, and then return the value that is stored there
message("getting cached data")
return(i)
}
data<-x$get()           ## if there is no value stored in getinverse, pass the value of get (our original matrix) to 'data'
i<-solve(data)          ## pass the value of the inverse of our original matrix to i, and return i in the next line
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix<- function(x = matrix()) {
i<-matrix(nrow=2,ncol=2)                                  ## create i as a null matrix
set<-function(y) {                          ## our first function, set, takes the matrix argument and sets it as our value
x<<-y
i<<-matrix(nrow=2,ncol=2)
}                                           ## get returns the value of the matrix
get<-function() x
setinverse<-function(solve) {               ## setinverse calculates the inverse of our matrix x, and passes i to the parent environment where it replaces the null matrix i
i<<-solve(x)
}
getinverse<-function() {                    ## getinverse retrieves the value of the inverted matrix, i, which is searched for in the current environment, not found, but found in the parent environment
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) ## makeCacheMatrix function returns a list which each of the above functions as its objects
}
## cacheSolve sees if there is a cached value of i (our inverted matrix) and returns it if there is, and if not, calculates an inverted matrix from objects stored in the previous function
cacheSolve <- function(x, ...) {
i<-x$getinverse()        ## first check x to see if there is a value stored in the getinverse function/object
if(!is.na(i)) {         ## if it is not na, then return the message that it is retrieving cached data that is stored in getinverse, and then return the value that is stored there
message("getting cached data")
return(i)
}
data<-x$get()           ## if there is no value stored in getinverse, pass the value of get (our original matrix) to 'data'
i<-solve(data)          ## pass the value of the inverse of our original matrix to i, and return i in the next line
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
?solve
makeCacheMatrix<- function(x = matrix()) {
i<-matrix(nrow=2,ncol=2)                                  ## create i as a null matrix
set<-function(y) {                          ## our first function, set, takes the matrix argument and sets it as our value
x<<-y
i<<-matrix(nrow=2,ncol=2)
}                                           ## get returns the value of the matrix
get<-function() x
setinverse<-function(solve) {               ## setinverse calculates the inverse of our matrix x, and passes i to the parent environment where it replaces the null matrix i
i<<-solve(x,...)
}
getinverse<-function() {                    ## getinverse retrieves the value of the inverted matrix, i, which is searched for in the current environment, not found, but found in the parent environment
i
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse) ## makeCacheMatrix function returns a list which each of the above functions as its objects
}
## cacheSolve sees if there is a cached value of i (our inverted matrix) and returns it if there is, and if not, calculates an inverted matrix from objects stored in the previous function
cacheSolve <- function(x, ...) {
i<-x$getinverse()        ## first check x to see if there is a value stored in the getinverse function/object
if(!is.na(i)) {         ## if it is not na, then return the message that it is retrieving cached data that is stored in getinverse, and then return the value that is stored there
message("getting cached data")
return(i)
}
data<-x$get()           ## if there is no value stored in getinverse, pass the value of get (our original matrix) to 'data'
i<-solve(data)          ## pass the value of the inverse of our original matrix to i, and return i in the next line
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
